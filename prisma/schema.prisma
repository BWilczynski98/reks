generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                String               @unique
  password             String?
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active               Boolean              @default(false)
  createdAt            DateTime             @default(now())
  name                 String?
  role                 Role                 @default(USER)
  updatedAt            DateTime             @updatedAt
  tokenToActivate      ActiveToken?
  registeredAnimals    Animal[]
  tokenToResetPassword ResetPasswordToken[]
}

model ActiveToken {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @db.Uuid
  createAt  DateTime @default(now())
  token     String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ResetPasswordToken {
  id             Int      @id @default(autoincrement())
  userId         String   @db.Uuid
  createAt       DateTime @default(now())
  token          String
  updatedAt      DateTime @updatedAt
  expirationDate DateTime @default(dbgenerated("(now() + '24:00:00'::interval)"))
  used           Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [id])
}

model Home {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  owner       String
  street      String
  phoneNumber String
  city        String
  postalCode  String
  pupils      Animal[]
}

model Animal {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createAt            DateTime    @default(now())
  updateAt            DateTime    @updatedAt
  name                String
  type                Type
  gender              Gender
  birthDate           DateTime
  locationWhereFound  String
  timeWhenFound       DateTime
  residence           Residence
  description         String?
  status              Status?     @default(UNADOPTABLE)
  userId              String      @db.Uuid
  referenceNumber     Int         @default(autoincrement())
  descriptionOfHealth String?
  homeId              String?     @db.Uuid
  healthCardId        String?     @db.Uuid
  photoUrl            Json[]
  Home                Home?       @relation(fields: [homeId], references: [id])
  user                User        @relation(fields: [userId], references: [id])
  HealthCard          HealthCard?
}

model HealthCard {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  allergies    Json[]
  drugs        Json[]
  vaccinations Json[]
  animalId     String   @unique @db.Uuid
  animal       Animal   @relation(fields: [animalId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Type {
  DOG
  CAT
}

enum Gender {
  MALE
  FEMALE
}

enum Residence {
  BASE
  TEMPORARY_HOME
}

enum Status {
  ADAPTED
  FOR_ADOPTION
  UNADOPTABLE
  QUARANTINE
}

enum AllergyCategory {
  FOOD
  CONTACT
  INHALATION
}
